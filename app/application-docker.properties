# ========================================
# CONFIGURACIÓN PARA PERFIL DOCKER
# ========================================

# Configuración de la aplicación
spring.application.name=inventario-tienda

# Puerto del servidor
server.port=8080

# ========================================
# CONFIGURACIÓN DE BASE DE DATOS MYSQL (DOCKER)
# ========================================

# URL de conexión a MySQL en Docker (usando nombre del servicio)
spring.datasource.url=jdbc:mysql://mysql:3306/inventario_tienda?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=America/Bogota&allowPublicKeyRetrieval=true
spring.datasource.username=${MYSQL_USER:root}
spring.datasource.password=${MYSQL_PASSWORD:pass}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Configuración del pool de conexiones HikariCP
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=2
spring.datasource.hikari.pool-name=InventarioHikariCP

# ========================================
# CONFIGURACIÓN DE JPA/HIBERNATE
# ========================================

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

# Configuraciones adicionales de Hibernate para optimización
spring.jpa.properties.hibernate.jdbc.batch_size=25
spring.jpa.properties.hibernate.jdbc.fetch_size=25
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.batch_versioned_data=true
spring.jpa.properties.hibernate.connection.autocommit=false
spring.jpa.properties.hibernate.cache.use_second_level_cache=false
spring.jpa.properties.hibernate.cache.use_query_cache=false

# ========================================
# CONFIGURACIÓN DE LOGGING (PRODUCCIÓN)
# ========================================

logging.level.com.jlzDev.inventario=INFO
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN
logging.level.org.springframework.security=INFO
logging.level.org.springframework.security.web=WARN
logging.level.org.springframework.web=INFO
logging.level.root=INFO

# Configuración de archivos de log
logging.file.name=/var/log/inventario/inventario.log
logging.file.max-size=50MB
logging.file.max-history=10
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n

# ========================================
# CONFIGURACIÓN DE JACKSON PARA JSON
# ========================================

spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone=America/Bogota
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.serialization.indent-output=false
spring.jackson.deserialization.fail-on-unknown-properties=false

# ========================================
# CONFIGURACIÓN DEL SERVIDOR
# ========================================

server.shutdown=graceful
spring.lifecycle.timeout-per-shutdown-phase=30s
server.compression.enabled=true
server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
server.compression.min-response-size=1024

# Configuración adicional del servidor para Docker
server.address=0.0.0.0
server.tomcat.accept-count=100
server.tomcat.max-connections=8192
server.tomcat.threads.max=200
server.tomcat.threads.min-spare=10

# ========================================
# CONFIGURACIÓN DE SEGURIDAD
# ========================================

# Configuración de seguridad temporal (para desarrollo en Docker)
# spring.security.user.name=${ADMIN_USER:admin}
# spring.security.user.password=${ADMIN_PASSWORD:pass}
spring.security.user.roles=ADMIN

# Seguridad JWT
app.security.jwt.secret=${JWT_SECRET:mi-clave-secreta-super-segura-para-jwt-inventario-2024-con-64-caracteres-minimo-para-hs512-algoritmo-seguro}
app.security.jwt.expiration-hours=24
app.security.jwt.refresh-expiration-days=30
app.security.password.min-length=6
app.security.password.max-length=100
app.security.password.max-failed-attempts=5
app.security.password.lockout-duration-minutes=15

# ========================================
# CONFIGURACIÓN DE ACTUATOR (MONITOREO)
# ========================================

management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=when-authorized
management.info.app.name=${spring.application.name}
management.info.app.version=1.0.0
management.info.app.description=Sistema de gestión de inventario para tienda (Docker)
management.health.db.enabled=true

# ========================================
# CONFIGURACIONES PERSONALIZADAS DE LA APLICACIÓN
# ========================================

# Configuración de la aplicación
app.config.timezone=America/Bogota
app.config.currency=COP
app.config.currency-symbol=$
app.config.date-format=yyyy-MM-dd
app.config.datetime-format=yyyy-MM-dd HH:mm:ss

# Configuración de características (feature flags) para producción
app.features.enable-user-registration=true
app.features.enable-email-verification=false
app.features.enable-two-factor-auth=false
app.features.enable-negative-stock=false
app.features.enable-audit-logging=true
app.features.enable-advanced-reports=true
app.features.enable-notifications=false

# Configuración de límites para producción
app.limits.max-page-size=50
app.limits.default-page-size=10
app.limits.max-file-size=5242880
app.limits.max-bulk-operations=50
app.limits.max-export-records=10000

# ========================================
# CONFIGURACIONES ESPECÍFICAS DE DOCKER
# ========================================

# Configuración de espera para la base de datos
spring.jpa.properties.hibernate.connection.provider_disables_autocommit=true
spring.datasource.hikari.auto-commit=false

# Configuración para healthcheck
management.endpoint.health.probes.enabled=true
management.health.livenessState.enabled=true
management.health.readinessState.enabled=true